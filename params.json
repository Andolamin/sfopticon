{"name":"SfOpticon","tagline":"In your Salesforce controlling your versions","body":"SfOpticon is a tool to add software configuration management capabilities to the Salesforce development cycle. \r\n\r\n### Getting SfOpticon\r\nThe source for SfOpticon can be downloaded on this website as a zip archive or as a gzipped tarball. SfOpticon is in active development, and is still in Alpha status. If you would like to stay connected and ensure you always have the latest version it is recommended that you clone the git repository and follow us on Github.\r\n```console\r\n$ git clone https://github.com/sfopticon/sfopticon.git\r\n```\r\nVisit http://github.com/sfopticon/sfopticon for the project page.\r\n\r\n### Configuration\r\nConfiguration details are stored in the 'application.yml' file. Please fill out your database and scm details here. Currently, MySQL and Github are the only supported configurations.\r\n\r\nNote that the database section follows all configuration details of the ActiveRecord configuration.\r\n\r\n### Installation\r\nPlease note that while the tools and libraries may install on a Windows system we have not tested this and do not support it at this time.\r\n\r\nInstallation is simple given a sane build environment. It requires [ruby](https://www.ruby-lang.org/), [bundler](http://bundler.io/), a configured database, and a GitHub account. \r\n```console\r\n$ cd sfopticon/\r\n$ bundle install\r\n```\r\nIf installation fails verify that you have a sane build environment with all required development libraries for compiling native Ruby library extensions.\r\n\r\nThe most common cause for installation failure is compiling the extensions for [Nokogiri](http://nokogiri.org) and MySQL. For Nokogiri you'll need to be sure you have libxml2-dev and libxslt-dev development libraries installed on your system. For MySQL make sure you have the client development libraries.\r\n\r\nAfter the bundle install is successful, execute:\r\n```console\r\n$ rake setup_db\r\n```\r\n\r\n### Usage\r\nFirst, a production environment must be setup.\r\n```console\r\n$ ./bin/environment.rb create --name <YOUR_PROD_ENV_NAME> --production\r\n```\r\nAfter you have created your production environment, feel free to create other non-production environments as you see fit.\r\n\r\nTo retrieve changes to your configured org you'll use the changeset subcommand of the scanner tool. You can do this manually, but it is recommended to create a relatively frequent (~20 - 30 minutes) cron job for this. As its name implies, the scanner tool scans your environment for changes and synchronizes them with the remote SCM system.\r\n```console\r\n$ ./bin/scanner.rb changeset --org <ENVIRONMENT_TO_SCAN>\r\n```\r\n\r\nFor sub-environments you'll want to rebase frequently. This brings changes down from the configured production environment and merges them into the sub-environment. Performing this step regularly will  reduce risk of merge conflicts.\r\n```console\r\n$ ./bin/integrate.rb rebase --org <ENVIRONMENT_TO_REBASE>\r\n```\r\nLastly, the integration tool allows you to integrate branches, and then deploy the merged changes to any environment.\r\n```console\r\n$ ./bin/integrate.rb merge --source <SOURCE_ENV> --destination <DEST_ENV>\r\n```\r\nThis will create an integration branch and perform a merge. If the merge is successful the changes will be deployed to the destination environment.\r\n\r\n## Example of a Common Workflow\r\n\r\nThe workflow we use (and what we expect to be a common workflow out in the wild) is a \r\nproduction environment with full sandboxes for feature development and hotfixes where the hotfix sandbox is kept in sync with production. The sandboxes are updated with any deploys to production for hotfix or separate feature releases.\r\n\r\nLet's walk through using SfOpticon to manage this scenario.\r\n\r\nFirst setup your environments. You must create your production environment first. You can specify --username and --password on the command line, or leave them out and allow the script to query you. Additionally, you can add --securitytoken.\r\n\r\n```console\r\n$ ./bin/environment.rb create --name Prod --host login.salesforce.com --production\r\n$ ./bin/environment.rb create --name Hotfix --host test.salesforce.com\r\n$ ./bin/environment.rb create --name Sandbox1 --host test.salesforce.com\r\n```\r\n\r\nYou now have an environment that looks like this\r\n![Environment Graph](/images/Graph2.png)\r\n\r\n### Change Monitoring\r\n\r\nYou'll want to setup the changeset scanner to execute every 20 minutes or so. This is \r\nthe piece that watches your Salesforce orgs, detects changes, and adds those changes \r\nto the underlying VCS.\r\n\r\nAdd a line to cron for each environment.\r\n\r\n```cron\r\n\t*/20 * * * bin/scanner.rb changeset --org Prod\r\n\t*/20 * * * bin/scanner.rb changeset --org Hotfix\r\n\t*/20 * * * bin/scanner.rb changeset --org Sandbox1\r\n```\r\nNote that this is the reverse of the common solution. Rather than committing your changes to the VCS and then deploying them to the org, simply go about your development as you normally do and allow the tools to manage the VCS integration. This has the benefit of allowing the tool to track declarative and configuration changes.\r\n\r\nNow consider that for the past week your developers have been working in Sandbox1 on a new feature while the changes have all been tracked by SfOpticon. It's time to deploy.\r\n\r\n### Deployment\r\n\r\nNow imagine that a SEV1 issue has just come in and you need to get this deployed to production right away. Hack away on the hotfix environment until you're ready for deploy.\r\n\r\nExecute:\r\n```console\r\n$ ./bin/integrate.rb merge --source Hotfix --destination Production\r\n```\r\nThis command will create a temporary integration branch from the Production branch, merge in the changes to Hotfix, generate destructive and productive manifests from the branch diffs, and deploy your changes to production.\r\n\r\nPretty cool, yeah?\r\n\r\nBut wait. Now Sandbox1 is out of sync with production. What's more, maybe the SEV1 you just pushed has overlapping code with your feature on the sandbox.\r\n\r\nIt's time to rebase!\r\n\r\n### Rebasing\r\n\r\nRebasing will take any changes in the production environment and merge them into the sub-environment using the VCS merging tools. \r\n```console\r\n$ ./bin/integrate.rb rebase --org Sandbox1\r\n```\r\nVoila! Not only do you have the changes in production, but if there was code overlap it's properly merged!\r\n\r\nAlternatively you could've executed the merge using the hotfix and sandbox names for the merge arguments. This is useful to move code around for integration testing, UAT, etc.\r\n```console\r\n$ ./bin/integrate.rb merge --source Hotfix --destination Sandbox1\r\n```\r\nIf there are merge conflicts you'll be notified and the script will exit. \r\n\r\n### Cherry Picking\r\n\r\nSay you would like to choose which changes on Sandbox1 you'd like to deploy to Production. We understand. We want that feature too, and it's on the roadmap. However it doesn't exist today. Today you'll need to actually undo those changes in the source environment and allow the scanner to apply the changeset to the VCS prior to deployment.\r\n\r\n### Troubleshooting\r\n// TO-DO Get all deb or rpm or osx or windows dependencies outside of the normal ruby things\r\n\r\n### Authors and Contributors\r\n* Ryan Parr - @ryanparr \r\n* Josh Arenson - @josharenson\r\n* Matthew Roark - @matthew-roark\r\n* Deb Weller - @debdub","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}